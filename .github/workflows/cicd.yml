name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  HELMFILE_FILE_PATH: ./deploy/helmfile/helmfile.yaml.gotmpl
  IMAGE_REPOSITORY: ${{ secrets.IMAGE_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Run ID
        run: |
          echo "Workflow Run ID: ${{ github.run_id }}"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'pnpm'

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # NOTE: disabled for now for simplicity in dev phase
      #
      # # Lint the code
      # - name: Lint code
      #   run: pnpm lint
      
      # # Run unit tests
      # - name: Run vitest
      #   run: pnpm test

      # Build project
      - name: Build project
        run: pnpm build

  # Manual approval gate before deployment
  approve-deployment:
    runs-on: ubuntu-latest
    needs: ci
    if: |
      (github.event_name == 'workflow_dispatch' || 
       (github.event_name == 'push' && github.ref == 'refs/heads/main')) &&
      needs.ci.result == 'success'
    environment: prod
    steps:
      - name: Manual approval checkpoint
        run: echo "Deployment approved, proceeding to deploy job"

  # Show when deployment is skipped
  deployment-skipped:
    runs-on: ubuntu-latest
    needs: ci
    if: |
      !((github.event_name == 'workflow_dispatch' || 
         (github.event_name == 'push' && github.ref == 'refs/heads/main')) &&
        needs.ci.result == 'success')
    steps:
      - name: Deployment skipped
        run: |
          echo "Deployment phase skipped - conditions not met:"
          echo "  - Event: ${{ github.event_name }}"
          echo "  - Branch: ${{ github.ref }}"
          echo "  - CI Result: ${{ needs.ci.result }}"
          echo "  - Required: Manual dispatch OR main branch push with successful CI"

  deploy:
    runs-on: ubuntu-latest
    needs: [ci, approve-deployment]
    if: |
      (github.event_name == 'workflow_dispatch' || 
       (github.event_name == 'push' && github.ref == 'refs/heads/main')) &&
      needs.ci.result == 'success' &&
      needs.approve-deployment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'pnpm'

      # Install dependencies and build (no artifact needed)
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_HOST }}    # e.g. ghcr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        # using github.sha as tag
        run: |
          docker build -t $IMAGE_REPOSITORY:$IMAGE_TAG .
          docker push $IMAGE_REPOSITORY:$IMAGE_TAG
        # ensure Dockerfile copies from .output as above

      - name: Helmfile init
        uses: XyLearningProgramming/helm.x3huang.dev/.github/actions/helmfile-init@main

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo '${{ secrets.KUBE_CONFIG_DATA }}' | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Upsert Kubernetes secret
        env:
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
        run: |
          # Ensure namespace exists
          kubectl create namespace frontend > /dev/null 2>&1 || true
          # Create or update secrets
          kubectl create secret generic helmfile-secret-frontend \
            --from-literal=POSTGRES_URL="$POSTGRES_URL" \
            --namespace=frontend \
            --save-config \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Dry‑run (Diff) before Apply
        uses: helmfile/helmfile-action@v2.0.4
        with:
          helmfile-args: diff --environment prod --detailed-exitcode
        continue-on-error: true
        # This acts as a dry‑run check

      - name: Apply Changes
        uses: helmfile/helmfile-action@v2.0.4
        with:
          helmfile-args: apply --environment prod